# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import List, Union
from datetime import datetime
from typing_extensions import Literal, Required, Annotated, TypedDict

from .._utils import PropertyInfo
from .elset_ingest_param import ElsetIngestParam
from .state_vector_ingest_param import StateVectorIngestParam

__all__ = ["CollectRequestCreateParams"]


class CollectRequestCreateParams(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    source: Required[str]
    """Source of the data."""

    start_time: Required[Annotated[Union[str, datetime], PropertyInfo(alias="startTime", format="iso8601")]]
    """
    The start time or earliest time of the collect or contact request window, in ISO
    8601 UTC format.
    """

    type: Required[str]
    """
    The type of this collect or contact request (DIRECTED SEARCH, DWELL, OBJECT,
    POL, RATE TRACK, SEARCH, SOI, STARE, TTC, VOLUME SEARCH, etc.).
    """

    id: str
    """Unique identifier of the record, auto-generated by the system."""

    alt: float
    """Height above WGS-84 ellipsoid (HAE), in kilometers.

    If an accompanying stopAlt is provided, then alt value can be assumed to be the
    starting altitude of a volume definition.
    """

    arg_of_perigee: Annotated[float, PropertyInfo(alias="argOfPerigee")]
    """
    The argument of perigee is the angle, in degrees, formed between the perigee and
    the ascending node.
    """

    az: float
    """
    The expected or directed azimuth angle, in degrees, for search or target
    acquisition.
    """

    customer: str
    """The customer for this request."""

    dec: float
    """
    The expected or directed declination angle, in degrees, for search or target
    acquisition.
    """

    duration: int
    """The duration of the collect request, in seconds.

    If both duration and endTime are provided, the endTime is assumed to take
    precedence.
    """

    dwell_id: Annotated[str, PropertyInfo(alias="dwellId")]
    """The dwell ID associated with this request.

    A dwell ID is dwell point specific and a DWELL request consist of many dwell
    point requests.
    """

    eccentricity: float
    """
    The orbital eccentricity of an astronomical object is a parameter that
    determines the amount by which its orbit around another body deviates from a
    perfect circle.
    """

    el: float
    """
    The expected or directed elevation angle, in degrees, for search or target
    acquisition.
    """

    elset: ElsetIngestParam
    """
    An element set is a collection of Keplerian orbital elements describing an orbit
    of a particular satellite. The data is used along with an orbit propagator in
    order to predict the motion of a satellite. The element set, or elset for short,
    consists of identification data, the classical elements and drag parameters.
    """

    end_time: Annotated[Union[str, datetime], PropertyInfo(alias="endTime", format="iso8601")]
    """The end time of the collect or contact request window, in ISO 8601 UTC format.

    If no endTime or duration is provided it is assumed the request is either
    ongoing or that the request is for a specified number of tracks (numTracks). If
    both duration and endTime are provided, the endTime is assumed to take
    precedence.
    """

    epoch: Annotated[Union[str, datetime], PropertyInfo(format="iso8601")]
    """Epoch time, in ISO 8601 UTC format, of the orbital elements."""

    es_id: Annotated[str, PropertyInfo(alias="esId")]
    """ID of the UDL Ephemeris Set of the object associated with this request."""

    extent_az: Annotated[float, PropertyInfo(alias="extentAz")]
    """
    The extent of the azimuth angle, in degrees, from center azimuth to define a
    spatial volume.
    """

    extent_el: Annotated[float, PropertyInfo(alias="extentEl")]
    """
    The extent of the elevation angle, in degrees, from center elevation to define a
    spatial volume.
    """

    extent_range: Annotated[float, PropertyInfo(alias="extentRange")]
    """The extent of the range, in km, from center range to define a spatial volume."""

    external_id: Annotated[str, PropertyInfo(alias="externalId")]
    """Optional ID from external systems.

    This field has no meaning within UDL and is provided as a convenience for
    systems that require tracking of an internal system generated ID.
    """

    frame_rate: Annotated[float, PropertyInfo(alias="frameRate")]
    """For optical sensors, the frame rate of the camera, in Hz."""

    freq: float
    """The estimated or expected emission frequency of the target, in MHz."""

    freq_max: Annotated[float, PropertyInfo(alias="freqMax")]
    """The maximum frequency of interest, in MHz."""

    freq_min: Annotated[float, PropertyInfo(alias="freqMin")]
    """The minimum frequency of interest, in MHz.

    If only minimum frequency is provided it is assumed to be minimum reportable
    frequency.
    """

    id_elset: Annotated[str, PropertyInfo(alias="idElset")]
    """ID of the UDL Elset of the object associated with this request."""

    id_manifold: Annotated[str, PropertyInfo(alias="idManifold")]
    """ID of the UDL Manifold Elset of the object associated with this request.

    A Manifold Elset provides theoretical Keplerian orbital elements belonging to an
    object of interest's manifold describing a possible/theoretical orbit for an
    object of interest for tasking purposes.
    """

    id_parent_req: Annotated[str, PropertyInfo(alias="idParentReq")]
    """The unique ID of the collect request record from which this request originated.

    This may be used for cases of sensor-to-sensor tasking, such as tip/cue
    operations.
    """

    id_plan: Annotated[str, PropertyInfo(alias="idPlan")]
    """Unique identifier of the parent plan or schedule associated with this request.

    If null, this request is assumed not associated with a plan or schedule.
    """

    id_sensor: Annotated[str, PropertyInfo(alias="idSensor")]
    """
    Unique identifier of the requested/scheduled/planned sensor associated with this
    request. If both idSensor and origSensorId are null then the request is assumed
    to be a general request for observations or contact on an object, if specified,
    or an area/volume. In this case, the requester may specify a desired obType.
    """

    id_state_vector: Annotated[str, PropertyInfo(alias="idStateVector")]
    """
    ID of the UDL State Vector of the object or central vector associated with this
    request.
    """

    inclination: float
    """
    The angle, in degrees, between the equator and the orbit plane when looking from
    the center of the Earth. Inclination ranges from 0-180 degrees, with 0-90
    representing posigrade orbits and 90-180 representing retrograde orbits.
    """

    integration_time: Annotated[float, PropertyInfo(alias="integrationTime")]
    """For optical sensors, the integration time per camera frame, in milliseconds."""

    iron: int
    """Inter-Range Operations Number.

    Four-digit identifier used to schedule and identify AFSCN contact support for
    booster, launch, and on-orbit operations.
    """

    irradiance: float
    """The target object irradiance value."""

    lat: float
    """WGS-84 latitude, in degrees.

    -90 to 90 degrees (negative values south of equator). If an accompanying stopLat
    is provided, then the lat value can be assumed to be the starting latitude of a
    volume definition.
    """

    lon: float
    """WGS-84 longitude, in degrees.

    -180 to 180 degrees (negative values west of Prime Meridian). If an accompanying
    stopLon is provided, then lon value can be assumed to be the starting longitude
    of a volume definition.
    """

    msg_create_date: Annotated[Union[str, datetime], PropertyInfo(alias="msgCreateDate", format="iso8601")]
    """
    The timestamp of the external message from which this request originated, if
    applicable, in ISO8601 UTC format with millisecond precision.
    """

    msg_type: Annotated[str, PropertyInfo(alias="msgType")]
    """The type of external message from which this request originated."""

    notes: str
    """Notes or comments associated with this request."""

    num_frames: Annotated[int, PropertyInfo(alias="numFrames")]
    """
    For optical sensors, the requested number of frames to capture at each sensor
    step.
    """

    num_obs: Annotated[int, PropertyInfo(alias="numObs")]
    """The number of requested observations on the target."""

    num_tracks: Annotated[int, PropertyInfo(alias="numTracks")]
    """The number of requested tracks on the target.

    If numTracks is not provided it is assumed to indicate all possible observations
    every pass over the request duration or within the request start/end window.
    """

    ob_type: Annotated[str, PropertyInfo(alias="obType")]
    """
    Optional type of observation (EO, IR, RADAR, RF-ACTIVE, RF-PASSIVE, OTHER)
    requested. This field may correspond to a request of a specific sensor, or to a
    general non sensor specific request.
    """

    orbit_regime: Annotated[str, PropertyInfo(alias="orbitRegime")]
    """The orbit regime of the target (GEO, HEO, LAUNCH, LEO, MEO, OTHER)."""

    orient_angle: Annotated[float, PropertyInfo(alias="orientAngle")]
    """
    The magnitude of rotation, in degrees, between the xAngle direction and locally
    defined equinoctial plane. A positive value indicates clockwise rotation about
    the sensor boresight vector.
    """

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_object_id: Annotated[str, PropertyInfo(alias="origObjectId")]
    """
    Optional identifier provided by the data source to indicate the target object of
    this request. This may be an internal identifier and not necessarily map to a
    valid satellite number.
    """

    orig_sensor_id: Annotated[str, PropertyInfo(alias="origSensorId")]
    """
    Optional identifier provided by the source to indicate the sensor identifier
    requested/scheduled/planned for this request. This may be an internal identifier
    and not necessarily a valid sensor ID. If both idSensor and origSensorId are
    null then the request is assumed to be a general request for observations or
    contact on an object, if specified, or an area/volume. In this case, the
    requester may specify a desired obType.
    """

    plan_index: Annotated[int, PropertyInfo(alias="planIndex")]
    """Index number (integer) for records within a collection plan or schedule."""

    polarization: str
    """The RF polarization (H, LHC, RHC, V)."""

    priority: str
    """
    The priority of the collect request (EMERGENCY, FLASH, IMMEDIATE, PRIORITY,
    ROUTINE).
    """

    ra: float
    """
    The expected or directed right ascension angle, in degrees, for search or target
    acquisition.
    """

    raan: float
    """
    Right ascension of the ascending node, or RAAN is the angle as measured in
    degrees eastwards (or, as seen from the north, counterclockwise) from the First
    Point of Aries to the ascending node.
    """

    range: float
    """The expected acquisition range or defined center range, in km."""

    rcs: float
    """The Radar Cross-Section of the target, in m^2."""

    rcs_max: Annotated[float, PropertyInfo(alias="rcsMax")]
    """The maximum Radar Cross-Section of the target, in m^2."""

    rcs_min: Annotated[float, PropertyInfo(alias="rcsMin")]
    """The minimum Radar Cross-Section of the target, in m^2.

    If only minimum RCS is provided it is assumed to be minimum reportable RCS.
    """

    reflectance: float
    """The fraction of solar energy reflected from target."""

    sat_no: Annotated[int, PropertyInfo(alias="satNo")]
    """Satellite/catalog number of the target on-orbit object for this request."""

    scenario: str
    """
    Pre-coordinated code, direction, or configuration to be executed by the sensor
    or site for this collect or contact.
    """

    semi_major_axis: Annotated[float, PropertyInfo(alias="semiMajorAxis")]
    """The average of the periapsis and apoapsis distances, in kilometers.

    For circular orbits, the semimajor axis is the distance between the centers of
    the bodies.
    """

    spectral_model: Annotated[str, PropertyInfo(alias="spectralModel")]
    """The spectral model used for the irradiance calculation."""

    srch_inc: Annotated[float, PropertyInfo(alias="srchInc")]
    """The maximum inclination, in degrees, to be used in search operations."""

    srch_pattern: Annotated[str, PropertyInfo(alias="srchPattern")]
    """The search pattern to be executed for this request (e.g.

    PICKET-FENCE, SCAN, etc.).
    """

    state_vector: Annotated[StateVectorIngestParam, PropertyInfo(alias="stateVector")]
    """
    This service provides operations for querying and manipulation of state vectors
    for OnOrbit objects. State vectors are cartesian vectors of position (r) and
    velocity (v) that, together with their time (epoch) (t), uniquely determine the
    trajectory of the orbiting body in space. J2000 is the preferred coordinate
    frame for all state vector positions/velocities in UDL, but in some cases data
    may be in another frame depending on the provider and/or datatype. Please see
    the 'Discover' tab in the storefront to confirm coordinate frames by data
    provider.
    """

    stop_alt: Annotated[float, PropertyInfo(alias="stopAlt")]
    """
    The stopping HAE WGS-84 height above ellipsoid (HAE), of a volume definition, in
    kilometers. The stopAlt value is only meaningful if a (starting) alt value is
    provided.
    """

    stop_lat: Annotated[float, PropertyInfo(alias="stopLat")]
    """The stopping WGS-84 latitude of a volume definition, in degrees.

    -90 to 90 degrees (negative values south of equator). The stopLat value is only
    meaningful if a (starting) lat value is provided.
    """

    stop_lon: Annotated[float, PropertyInfo(alias="stopLon")]
    """The stopping WGS-84 longitude of a volume definition, in degrees.

    -180 to 180 degrees (negative values west of Prime Meridian). The stopLon value
    is only meaningful if a (starting) lon value is provided.
    """

    suffix: str
    """The (SSN) tasking suffix (A-Z) associated with this request.

    The suffix defines the amount of observational data and the frequency of
    collection. Note that suffix definitions are sensor type specific.
    """

    tags: List[str]
    """
    Optional array of provider/source specific tags for this data, where each
    element is no longer than 32 characters, used for implementing data owner
    conditional access controls to restrict access to the data. Should be left null
    by data providers unless conditional access controls are coordinated with the
    UDL team.
    """

    target_size: Annotated[float, PropertyInfo(alias="targetSize")]
    """The minimum object (diameter) size, in meters, to be reported."""

    task_category: Annotated[int, PropertyInfo(alias="taskCategory")]
    """The (SSN) tasking category (1-5) associated with this request.

    The tasking category defines the priority of gathering and transmitting the
    requested observational data. Note that category definitions are sensor type
    specific.
    """

    task_group: Annotated[str, PropertyInfo(alias="taskGroup")]
    """The tasking group to which the target object is assigned."""

    task_id: Annotated[str, PropertyInfo(alias="taskId")]
    """Task ID associated with this request.

    A task ID may be associated with a single collect request or may be used to tie
    together the sub-requests of a full collect, for example a DWELL consisting of
    many dwell points.
    """

    true_anomoly: Annotated[float, PropertyInfo(alias="trueAnomoly")]
    """
    The true anomaly defines the angular position, in degrees, of the object on it's
    orbital path as measured from the orbit focal point at epoch. The true anomaly
    is referenced from perigee.
    """

    uct_follow_up: Annotated[bool, PropertyInfo(alias="uctFollowUp")]
    """Boolean indicating that this collect request is UCT follow-up."""

    vis_mag: Annotated[float, PropertyInfo(alias="visMag")]
    """The estimated or expected visual magnitude of the target, in Magnitudes (M)."""

    vis_mag_max: Annotated[float, PropertyInfo(alias="visMagMax")]
    """
    The maximum estimated or expected visual magnitude of the target, in Magnitudes
    (M).
    """

    vis_mag_min: Annotated[float, PropertyInfo(alias="visMagMin")]
    """
    The minimum estimated or expected visual magnitude of the target, in Magnitudes
    (M). If only minimum vismag is provided it is assumed to be minimum reportable
    vismag.
    """

    x_angle: Annotated[float, PropertyInfo(alias="xAngle")]
    """
    The angular distance, in degrees, in the sensor-x direction from scan center
    defined by the central vector. The specification of xAngle and yAngle defines a
    rectangle of width 2*xAngle and height 2*yAngle centered about the central
    vector.
    """

    y_angle: Annotated[float, PropertyInfo(alias="yAngle")]
    """
    The angular distance, in degrees, in the sensor-y direction from scan center
    defined by the central vector. The specification of xAngle and yAngle defines a
    rectangle of width 2*xAngle and height 2*yAngle centered about the central
    vector.
    """
