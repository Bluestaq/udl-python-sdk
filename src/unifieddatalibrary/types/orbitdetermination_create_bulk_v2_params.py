# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import List, Union, Iterable
from datetime import datetime
from typing_extensions import Literal, Required, Annotated, TypedDict

from .._utils import PropertyInfo
from .elset_ingest_param import ElsetIngestParam
from .state_vector_ingest_param import StateVectorIngestParam

__all__ = ["OrbitdeterminationCreateBulkV2Params", "Body"]


class OrbitdeterminationCreateBulkV2Params(TypedDict, total=False):
    body: Required[Iterable[Body]]


class Body(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    end_time: Required[Annotated[Union[str, datetime], PropertyInfo(alias="endTime", format="iso8601")]]
    """
    End time for OD solution in ISO 8601 UTC datetime format, with microsecond
    precision.
    """

    initial_od: Required[Annotated[bool, PropertyInfo(alias="initialOD")]]
    """Flag indicating whether this is an initial orbit determination."""

    method: Required[str]
    """Orbit determination method used to produce this record (e.g.

    BLS, KF, UKF, etc.).
    """

    source: Required[str]
    """Source of the data."""

    start_time: Required[Annotated[Union[str, datetime], PropertyInfo(alias="startTime", format="iso8601")]]
    """
    Start time for OD solution in ISO 8601 UTC datetime format, with microsecond
    precision.
    """

    id: str
    """Unique identifier of the record, auto-generated by the system."""

    accepted_ob_ids: Annotated[List[str], PropertyInfo(alias="acceptedObIds")]
    """Array of UDL data (observation) UUIDs that were accepted in this OD solution.

    See the associated acceptedObTyps array for the specific types of observations
    for the positionally corresponding UUIDs in this array (the two arrays must
    match in size).
    """

    accepted_ob_typs: Annotated[List[str], PropertyInfo(alias="acceptedObTyps")]
    """Array of UDL observation types (e.g.

    DOA, EO, RADAR, RF) of the observations that were accepted in this OD solution.
    See the associated acceptedObIds array for the records UUID(s), positionally
    corresponding to the record types in this array. The acceptedObTyps and
    acceptedObIds arrays must match in size.
    """

    agom_est: Annotated[bool, PropertyInfo(alias="agomEst")]
    """Flag indicating whether the AGOM was estimated during this OD solution."""

    agom_model: Annotated[str, PropertyInfo(alias="agomModel")]
    """Model used to estimate the AGOM."""

    apriori_elset: Annotated[ElsetIngestParam, PropertyInfo(alias="aprioriElset")]
    """
    An element set is a collection of Keplerian orbital elements describing an orbit
    of a particular satellite. The data is used along with an orbit propagator in
    order to predict the motion of a satellite. The element set, or elset for short,
    consists of identification data, the classical elements and drag parameters.
    """

    apriori_id_elset: Annotated[str, PropertyInfo(alias="aprioriIdElset")]
    """Identifier of the element set used to seed this OD solution.

    This ID can be used to obtain additional information on an Elset object using
    the 'get by ID' operation (e.g. /udl/elset/{id}). For example, the Elset with
    idElset = abc would be queried as /udl/elset/abc.
    """

    apriori_id_state_vector: Annotated[str, PropertyInfo(alias="aprioriIdStateVector")]
    """Identifier of the state vector used to seed this OD solution.

    This ID can be used to obtain additional information on a StateVector object
    using the 'get by ID' operation (e.g. /udl/statevector/{id}). For example, the
    StateVector with idStateVector = abc would be queried as /udl/statevector/abc.
    """

    apriori_state_vector: Annotated[StateVectorIngestParam, PropertyInfo(alias="aprioriStateVector")]
    """
    This service provides operations for querying and manipulation of state vectors
    for OnOrbit objects. State vectors are cartesian vectors of position (r) and
    velocity (v) that, together with their time (epoch) (t), uniquely determine the
    trajectory of the orbiting body in space. J2000 is the preferred coordinate
    frame for all state vector positions/velocities in UDL, but in some cases data
    may be in another frame depending on the provider and/or datatype. Please see
    the 'Discover' tab in the storefront to confirm coordinate frames by data
    provider.
    """

    ballistic_coeff_est: Annotated[bool, PropertyInfo(alias="ballisticCoeffEst")]
    """
    Flag indicating whether the ballistic coefficient was estimated during this OD
    solution.
    """

    ballistic_coeff_model: Annotated[str, PropertyInfo(alias="ballisticCoeffModel")]
    """Model used to estimate the ballistic coefficient."""

    best_pass_wrms: Annotated[float, PropertyInfo(alias="bestPassWrms")]
    """
    Lowest Weighted Root Mean Squared (RMS) value achieved for any single satellite
    pass during the observation span, indicating the pass with the highest quality
    OD solution.
    """

    edr: float
    """Model parameter value for energy dissipation rate (EDR) in watts per kilogram."""

    effective_from: Annotated[Union[str, datetime], PropertyInfo(alias="effectiveFrom", format="iso8601")]
    """
    Optional start time at which this OD solution is accurate, in ISO 8601 UTC
    datetime format with microsecond precision.
    """

    effective_until: Annotated[Union[str, datetime], PropertyInfo(alias="effectiveUntil", format="iso8601")]
    """
    Optional end time at which this OD solution may no longer be accurate, in ISO
    8601 UTC datetime format with microsecond precision.
    """

    error_growth_rate: Annotated[float, PropertyInfo(alias="errorGrowthRate")]
    """Error growth rate of the OD solution in kilometers per day."""

    first_pass_wrms: Annotated[float, PropertyInfo(alias="firstPassWrms")]
    """
    The Weighted Root Mean Squared (RMS) calculated for the first satellite pass in
    the observation span. Serves as the initial quality metric for the beginning of
    the observation period.
    """

    fit_span: Annotated[float, PropertyInfo(alias="fitSpan")]
    """The fit span, in days, used in a Batch Least Squares (BLS) OD."""

    last_ob_end: Annotated[Union[str, datetime], PropertyInfo(alias="lastObEnd", format="iso8601")]
    """
    The end of the time interval containing the time of the last accepted
    observation, in ISO 8601 UTC datetime format with microsecond precision. For an
    exact observation time, the lastObStart and lastObEnd are the same.
    """

    last_ob_start: Annotated[Union[str, datetime], PropertyInfo(alias="lastObStart", format="iso8601")]
    """
    The start of the time interval containing the time of the last accepted
    observation, in ISO 8601 UTC datetime format with microsecond precision. For an
    exact observation time, the lastObStart and lastObEnd are the same.
    """

    method_source: Annotated[str, PropertyInfo(alias="methodSource")]
    """Source of orbit determination method used to produce this record (e.g.

    ASW, ACTRAC, FreeFlyer, GEODYNE, GDTS, etc.).
    """

    num_iterations: Annotated[int, PropertyInfo(alias="numIterations")]
    """The number of iterations taken for the algorithm to converge on an OD solution."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_object_id: Annotated[str, PropertyInfo(alias="origObjectId")]
    """
    Optional identifier provided by the OD source to indicate the target on-orbit
    object of this OD solution. This may be an internal identifier and not
    necessarily map to a valid satellite number.
    """

    previous_wrms: Annotated[float, PropertyInfo(alias="previousWrms")]
    """
    The Weighted Root Mean Squared (RMS) of the differential correction from the
    previous overhead pass of the satellite. Provides a point of comparison for
    assessing changes in the quality of the OD solution between consecutive passes.
    """

    rejected_ob_ids: Annotated[List[str], PropertyInfo(alias="rejectedObIds")]
    """Array of UDL data (observation) UUIDs that were rejected in this OD solution.

    See the associated rejectedObTyps array for the specific types of observations
    for the positionally corresponding UUIDs in this array (the two arrays must
    match in size).
    """

    rejected_ob_typs: Annotated[List[str], PropertyInfo(alias="rejectedObTyps")]
    """Array of UDL observation types (e.g.

    DOA, EO, RADAR, RF) of the observations that were rejected in this OD solution.
    See the associated rejectedObIds array for the records UUID(s), positionally
    corresponding to the record types in this array. The rejectedObTyps and
    rejectedObIds arrays must match in size.
    """

    rms_convergence_criteria: Annotated[float, PropertyInfo(alias="rmsConvergenceCriteria")]
    """
    OD parameter value for the Root Mean Square (RMS) convergence criteria to
    successfully close the OD solution.
    """

    sat_no: Annotated[int, PropertyInfo(alias="satNo")]
    """Satellite/Catalog number of the target on-orbit object."""

    sensor_ids: Annotated[List[str], PropertyInfo(alias="sensorIds")]
    """
    Array of UDL UUIDs (idSensor) of the sensors that contributed observations in
    this OD solution.
    """

    time_span: Annotated[float, PropertyInfo(alias="timeSpan")]
    """The time span used for the OD of the object, in days."""

    wrms: float
    """
    The Weighted Root Mean Squared (RMS) of the differential correction of the
    target object that produced this OD state. WRMS is a quality indicator of the OD
    update, with a value of 1.00 being optimal. WRMS applies to batch least squares
    (BLS) processes.
    """
