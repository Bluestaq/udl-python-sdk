# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import List, Union
from datetime import date, datetime
from typing_extensions import Literal, Required, Annotated, TypedDict

from .._utils import PropertyInfo

__all__ = ["BusUpdateParams", "Entity", "EntityLocation", "EntityOnOrbit"]


class BusUpdateParams(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    name: Required[str]
    """Name of this bus."""

    source: Required[str]
    """Source of the data."""

    body_id: Annotated[str, PropertyInfo(alias="id")]
    """Unique identifier of the record, auto-generated by the system."""

    aocs_notes: Annotated[str, PropertyInfo(alias="aocsNotes")]
    """Attitude and Orbital Control Notes/description for the bus."""

    avg_dry_mass: Annotated[float, PropertyInfo(alias="avgDryMass")]
    """Average mass of this bus without payloads or fuel, in kilograms."""

    avg_payload_mass: Annotated[float, PropertyInfo(alias="avgPayloadMass")]
    """Average mass available on this bus for payloads, in kilograms."""

    avg_payload_power: Annotated[float, PropertyInfo(alias="avgPayloadPower")]
    """Average power available on this bus for payloads, in kilowatts."""

    avg_spacecraft_power: Annotated[float, PropertyInfo(alias="avgSpacecraftPower")]
    """Average power available on this bus, in kilowatts."""

    avg_wet_mass: Annotated[float, PropertyInfo(alias="avgWetMass")]
    """Average mass of this bus with fuel, but without payloads, in kilograms."""

    body_dimension_x: Annotated[float, PropertyInfo(alias="bodyDimensionX")]
    """Body dimension in X direction pertaining to length, in meters."""

    body_dimension_y: Annotated[float, PropertyInfo(alias="bodyDimensionY")]
    """Body dimension in Y direction pertaining to height, in meters."""

    body_dimension_z: Annotated[float, PropertyInfo(alias="bodyDimensionZ")]
    """Body dimension in Z direction pertaining to width, in meters."""

    bus_kit_designer_org_id: Annotated[str, PropertyInfo(alias="busKitDesignerOrgId")]
    """Unique identifier of the organization which designs the bus kit."""

    country_code: Annotated[str, PropertyInfo(alias="countryCode")]
    """Country where this bus was manufactured.

    This value is typically the ISO 3166 Alpha-2 two-character country code, however
    it can also represent various consortiums that do not appear in the ISO
    document. The code must correspond to an existing country in the UDLâ€™s country
    API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code,
    or alternate code values that exist for the specified country code.
    """

    description: str
    """Notes/description of the bus."""

    entity: Entity
    """
    An entity is a generic representation of any object within a space/SSA system
    such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
    entity can have an operating unit, a location (if terrestrial), and statuses.
    """

    generic: bool
    """Boolean indicating if this bus is generic."""

    id_entity: Annotated[str, PropertyInfo(alias="idEntity")]
    """ID of the parent entity for this bus."""

    launch_envelope_dimension_x: Annotated[float, PropertyInfo(alias="launchEnvelopeDimensionX")]
    """Launch envelope dimension in X direction, in meters."""

    launch_envelope_dimension_y: Annotated[float, PropertyInfo(alias="launchEnvelopeDimensionY")]
    """Launch envelope dimension in Y direction, in meters."""

    launch_envelope_dimension_z: Annotated[float, PropertyInfo(alias="launchEnvelopeDimensionZ")]
    """Launch envelope dimension in Z direction, in meters."""

    main_computer_manufacturer_org_id: Annotated[str, PropertyInfo(alias="mainComputerManufacturerOrgId")]
    """
    Unique identifier of the organization which manufactures the main onboard
    computer for this bus.
    """

    manufacturer_org_id: Annotated[str, PropertyInfo(alias="manufacturerOrgId")]
    """Unique identifier of the organization which manufactures this bus."""

    mass_category: Annotated[str, PropertyInfo(alias="massCategory")]
    """Mass category of this bus (e.g.

    1 - 10 kg: Nanosatellite, 10 - 100 kg: Microsatellite, 100 - 500 kg:
    Minisatellite, 1000 - 2500kg: Medium satellite, etc.).
    """

    max_bol_power_lower: Annotated[float, PropertyInfo(alias="maxBOLPowerLower")]
    """Maximum power at beginning of life, lower bounds, in kilowatts."""

    max_bol_power_upper: Annotated[float, PropertyInfo(alias="maxBOLPowerUpper")]
    """Maximum power at beginning of life, upper bounds, in kilowatts."""

    max_bol_station_mass: Annotated[float, PropertyInfo(alias="maxBOLStationMass")]
    """Maximum mass on station at beginning of life, in kilograms."""

    max_dry_mass: Annotated[float, PropertyInfo(alias="maxDryMass")]
    """Maximum mass of this bus without payloads or fuel, in kilograms."""

    max_eol_power_lower: Annotated[float, PropertyInfo(alias="maxEOLPowerLower")]
    """Maximum power at end of life, lower bounds, in kilowatts."""

    max_eol_power_upper: Annotated[float, PropertyInfo(alias="maxEOLPowerUpper")]
    """Maximum power at end of life, upper bounds, in kilowatts."""

    max_launch_mass_lower: Annotated[float, PropertyInfo(alias="maxLaunchMassLower")]
    """Maximum mass at launch, lower bounds, in kilograms."""

    max_launch_mass_upper: Annotated[float, PropertyInfo(alias="maxLaunchMassUpper")]
    """Maximum mass at launch, upper bounds, in kilograms."""

    max_payload_mass: Annotated[float, PropertyInfo(alias="maxPayloadMass")]
    """Maximum payload mass available, in kilograms."""

    max_payload_power: Annotated[float, PropertyInfo(alias="maxPayloadPower")]
    """Maximum payload power available, in kilowatts."""

    max_spacecraft_power: Annotated[float, PropertyInfo(alias="maxSpacecraftPower")]
    """Maximum power available on this bus, in kilowatts."""

    max_wet_mass: Annotated[float, PropertyInfo(alias="maxWetMass")]
    """Maximum mass of this bus with fuel, but without payloads, in kilograms."""

    median_dry_mass: Annotated[float, PropertyInfo(alias="medianDryMass")]
    """Median mass of this bus without payloads or fuel, in kilograms."""

    median_wet_mass: Annotated[float, PropertyInfo(alias="medianWetMass")]
    """Median mass of this bus with fuel, but without payloads, in kilograms."""

    min_dry_mass: Annotated[float, PropertyInfo(alias="minDryMass")]
    """Minimum mass of this bus without payloads or fuel, in kilograms."""

    min_wet_mass: Annotated[float, PropertyInfo(alias="minWetMass")]
    """Minimum mass of this bus with fuel, but without payloads, in kilograms."""

    num_orbit_type: Annotated[int, PropertyInfo(alias="numOrbitType")]
    """The number of orbit types this bus can support."""

    oap_payload_power: Annotated[float, PropertyInfo(alias="oapPayloadPower")]
    """
    Orbit averaged power (the power averaged over one orbit) available on this bus
    for payloads, in kilowatts.
    """

    oap_spacecraft_power: Annotated[float, PropertyInfo(alias="oapSpacecraftPower")]
    """
    Orbit averaged power (the power averaged over one orbit) available on this bus,
    in kilowatts.
    """

    orbit_types: Annotated[List[str], PropertyInfo(alias="orbitTypes")]
    """Array of orbit types this bus can support (e.g.

    GEO, LEO, etc.). Must contain the same number of elements as the value of
    numOrbitType.
    """

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    payload_dimension_x: Annotated[float, PropertyInfo(alias="payloadDimensionX")]
    """The radial dimension available on this bus for payloads, in meters."""

    payload_dimension_y: Annotated[float, PropertyInfo(alias="payloadDimensionY")]
    """The in-track dimension available on this bus for payloads, in meters."""

    payload_dimension_z: Annotated[float, PropertyInfo(alias="payloadDimensionZ")]
    """The cross-track dimension available on this bus for payloads, in meters."""

    payload_volume: Annotated[float, PropertyInfo(alias="payloadVolume")]
    """The volume available on this bus for payloads, in cubic meters."""

    power_category: Annotated[str, PropertyInfo(alias="powerCategory")]
    """Power category of this bus (e.g. 0-1kW low power, etc)."""

    telemetry_tracking_manufacturer_org_id: Annotated[str, PropertyInfo(alias="telemetryTrackingManufacturerOrgId")]
    """
    Unique identifier of the organization which manufactures the telemetry tracking
    and command subsystem for this bus.
    """

    type: str
    """Type of this bus."""


class EntityLocation(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    name: Required[str]
    """Location name."""

    source: Required[str]
    """Source of the data."""

    altitude: float
    """Altitude of the location, in kilometers."""

    country_code: Annotated[str, PropertyInfo(alias="countryCode")]
    """The country code.

    This value is typically the ISO 3166 Alpha-2 two-character country code, however
    it can also represent various consortiums that do not appear in the ISO
    document. The code must correspond to an existing country in the UDLâ€™s country
    API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code,
    or alternate code values that exist for the specified country code.
    """

    id_location: Annotated[str, PropertyInfo(alias="idLocation")]
    """Unique identifier of the location, auto-generated by the system."""

    lat: float
    """WGS84 latitude of the location, in degrees.

    -90 to 90 degrees (negative values south of equator).
    """

    lon: float
    """WGS84 longitude of the location, in degrees.

    -180 to 180 degrees (negative values west of Prime Meridian).
    """

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """


class EntityOnOrbit(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    sat_no: Required[Annotated[int, PropertyInfo(alias="satNo")]]
    """Satellite/Catalog number of the target on-orbit object."""

    source: Required[str]
    """Source of the data."""

    alt_name: Annotated[str, PropertyInfo(alias="altName")]
    """Alternate name of the on-orbit object."""

    category: Literal[
        "Unknown",
        "On-Orbit",
        "Decayed",
        "Cataloged Without State",
        "Launch Nominal",
        "Analyst Satellite",
        "Cislunar",
        "Lunar",
        "Hyperbolic",
        "Heliocentric",
        "Interplanetary",
        "Lagrangian",
        "Docked",
    ]
    """Category of the on-orbit object.

    (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst
    Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary,
    Lagrangian, Docked).
    """

    common_name: Annotated[str, PropertyInfo(alias="commonName")]
    """Common name of the on-orbit object."""

    constellation: str
    """Constellation to which this satellite belongs."""

    country_code: Annotated[str, PropertyInfo(alias="countryCode")]
    """The country code.

    This value is typically the ISO 3166 Alpha-2 two-character country code, however
    it can also represent various consortiums that do not appear in the ISO
    document. The code must correspond to an existing country in the UDLâ€™s country
    API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code,
    or alternate code values that exist for the specified country code.
    """

    decay_date: Annotated[Union[str, datetime], PropertyInfo(alias="decayDate", format="iso8601")]
    """Date of decay."""

    id_on_orbit: Annotated[str, PropertyInfo(alias="idOnOrbit")]
    """
    For the public catalog, the idOnOrbit is typically the satellite number as a
    string, but may be a UUID for analyst or other unknown or untracked satellites,
    auto-generated by the system.
    """

    intl_des: Annotated[str, PropertyInfo(alias="intlDes")]
    """
    International Designator, typically of the format YYYYLLLAAA, where YYYY is the
    launch year, LLL is the sequential launch number of that year, and AAA is an
    optional launch piece designator for the launch.
    """

    launch_date: Annotated[Union[str, date], PropertyInfo(alias="launchDate", format="iso8601")]
    """Date of launch."""

    launch_site_id: Annotated[str, PropertyInfo(alias="launchSiteId")]
    """Id of the associated launchSite entity."""

    lifetime_years: Annotated[int, PropertyInfo(alias="lifetimeYears")]
    """Estimated lifetime of the on-orbit payload, if known."""

    mission_number: Annotated[str, PropertyInfo(alias="missionNumber")]
    """Mission number of the on-orbit object."""

    object_type: Annotated[
        Literal["ROCKET BODY", "DEBRIS", "PAYLOAD", "PLATFORM", "MANNED", "UNKNOWN"], PropertyInfo(alias="objectType")
    ]
    """
    Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED,
    UNKNOWN.
    """

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """


class Entity(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    name: Required[str]
    """Unique entity name."""

    source: Required[str]
    """Source of the data."""

    type: Required[
        Literal[
            "AIRCRAFT",
            "BUS",
            "COMM",
            "IR",
            "NAVIGATION",
            "ONORBIT",
            "RFEMITTER",
            "SCIENTIFIC",
            "SENSOR",
            "SITE",
            "VESSEL",
        ]
    ]
    """
    The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR,
    NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
    """

    country_code: Annotated[str, PropertyInfo(alias="countryCode")]
    """The country code.

    This value is typically the ISO 3166 Alpha-2 two-character country code, however
    it can also represent various consortiums that do not appear in the ISO
    document. The code must correspond to an existing country in the UDLâ€™s country
    API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code,
    or alternate code values that exist for the specified country code.
    """

    id_entity: Annotated[str, PropertyInfo(alias="idEntity")]
    """Unique identifier of the record."""

    id_location: Annotated[str, PropertyInfo(alias="idLocation")]
    """Unique identifier of the entity location, if terrestrial/fixed."""

    id_on_orbit: Annotated[str, PropertyInfo(alias="idOnOrbit")]
    """Onorbit identifier if this entity is part of an on-orbit object.

    For the public catalog, the idOnOrbit is typically the satellite number as a
    string, but may be a UUID for analyst or other unknown or untracked satellites.
    """

    id_operating_unit: Annotated[str, PropertyInfo(alias="idOperatingUnit")]
    """Unique identifier of the associated operating unit object."""

    location: EntityLocation
    """
    Model representation of a location, which is a specific fixed point on the earth
    and is used to denote the locations of fixed sensors, operating units, etc.
    """

    on_orbit: Annotated[EntityOnOrbit, PropertyInfo(alias="onOrbit")]
    """Model object representing on-orbit objects or satellites in the system."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    owner_type: Annotated[
        Literal["Commercial", "Government", "Academic", "Consortium", "Other"], PropertyInfo(alias="ownerType")
    ]
    """Type of organization which owns this entity (e.g.

    Commercial, Government, Academic, Consortium, etc).
    """

    taskable: bool
    """Boolean indicating if this entity is taskable."""

    urls: List[str]
    """List of URLs to additional details/documents for this entity."""
