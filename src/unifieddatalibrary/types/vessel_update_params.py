# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import List, Union
from datetime import date, datetime
from typing_extensions import Literal, Required, Annotated, TypedDict

from .._utils import PropertyInfo

__all__ = ["VesselUpdateParams", "Entity", "EntityLocation", "EntityOnOrbit"]


class VesselUpdateParams(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    source: Required[str]
    """Source of the data."""

    id_2: Annotated[str, PropertyInfo(alias="id")]
    """Unique identifier of the record, auto-generated by the system."""

    alt_vessel_id: Annotated[str, PropertyInfo(alias="altVesselId")]
    """The original source Id for this vessel."""

    callsign: str
    """A uniquely designated identifier for the vessel's transmitter station.

    All radio transmissions must be individually identified by the call sign.
    Merchant and naval vessels are assigned call signs by their national licensing
    authorities.
    """

    entity: Entity
    """
    An entity is a generic representation of any object within a space/SSA system
    such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An
    entity can have an operating unit, a location (if terrestrial), and statuses.
    """

    first_seen: Annotated[Union[str, datetime], PropertyInfo(alias="firstSeen", format="iso8601")]
    """The date this vessel was first seen."""

    hull_num: Annotated[str, PropertyInfo(alias="hullNum")]
    """The vessel hull number designation of this maritime vessel.

    The hull number is a 1-6 character alphanumeric entry assigned to a ship and
    painted on the hull.
    """

    id_entity: Annotated[str, PropertyInfo(alias="idEntity")]
    """Unique identifier of the parent entity. idEntity is required for Put."""

    id_organization: Annotated[str, PropertyInfo(alias="idOrganization")]
    """The UDL ID of the organization that owns the vessel."""

    imon: int
    """The International Maritime Organization Number of the vessel.

    IMON is a seven-digit number that uniquely identifies the vessel.
    """

    length: float
    """The overall length of the vessel, in meters.

    A value of 511 indicates a vessel length of 511 meters or greater.
    """

    max_draught: Annotated[float, PropertyInfo(alias="maxDraught")]
    """
    The maximum static draught, in meters, of the vessel defined as the distance
    between the ship’s keel and the waterline of the vessel.
    """

    max_speed: Annotated[float, PropertyInfo(alias="maxSpeed")]
    """The maximum possible speed of this vessel in meters per second."""

    mmsi: str
    """The Maritime Mobile Service Identity of the vessel.

    MMSI is a nine-digit number that identifies the transmitter station of the
    vessel.
    """

    num_blades: Annotated[int, PropertyInfo(alias="numBlades")]
    """The number of blades per shaft for this vessel."""

    num_shafts: Annotated[int, PropertyInfo(alias="numShafts")]
    """The number of shafts on this vessel."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    prop_type: Annotated[str, PropertyInfo(alias="propType")]
    """The type of propulsion employed by this vessel."""

    sconum: str
    """
    The Ship Control Number (SCONUM) is a naval vessel identification number
    (alphanumeric code) assigned by the Office of Naval Intelligence. SCONUM is
    sometimes referred to as NOIC ID. SCONUMs are typically of the form A#####,
    where A is an alpha character and # is numerical.
    """

    status: str
    """The status of this vessel."""

    stern_type: Annotated[str, PropertyInfo(alias="sternType")]
    """The stern type code (Counter, Cruiser) associated with this vessel."""

    vessel_builder: Annotated[str, PropertyInfo(alias="vesselBuilder")]
    """The shipbuilder who built this vessel."""

    vessel_class: Annotated[str, PropertyInfo(alias="vesselClass")]
    """
    The common name for a group of ships with similar design, usually named for the
    first vessel of the class.
    """

    vessel_description: Annotated[str, PropertyInfo(alias="vesselDescription")]
    """Further description or explanation of the vessel or type."""

    vessel_flag: Annotated[str, PropertyInfo(alias="vesselFlag")]
    """The flag of the subject vessel."""

    vessel_name: Annotated[str, PropertyInfo(alias="vesselName")]
    """The name of this vessel.

    Vessel names that exceed the AIS 20 character are shortened (not truncated) to
    15 character-spaces, followed by an underscore and the last 4 characters-spaces
    of the vessel full name.
    """

    vessel_type: Annotated[str, PropertyInfo(alias="vesselType")]
    """The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.)."""

    vsl_wt: Annotated[float, PropertyInfo(alias="vslWt")]
    """The weight in tons, of this vessel."""

    width: float
    """The breadth of the vessel, in meters.

    A value of 63 indicates a vessel breadth of 63 meters or greater.
    """

    year_built: Annotated[str, PropertyInfo(alias="yearBuilt")]
    """Year the vessel went into service."""


class EntityLocation(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    name: Required[str]
    """Location name."""

    source: Required[str]
    """Source of the data."""

    altitude: float
    """Altitude of the location, in kilometers."""

    country_code: Annotated[str, PropertyInfo(alias="countryCode")]
    """The country code.

    This value is typically the ISO 3166 Alpha-2 two-character country code, however
    it can also represent various consortiums that do not appear in the ISO
    document. The code must correspond to an existing country in the UDL’s country
    API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code,
    or alternate code values that exist for the specified country code.
    """

    id_location: Annotated[str, PropertyInfo(alias="idLocation")]
    """Unique identifier of the location, auto-generated by the system."""

    lat: float
    """WGS84 latitude of the location, in degrees.

    -90 to 90 degrees (negative values south of equator).
    """

    lon: float
    """WGS84 longitude of the location, in degrees.

    -180 to 180 degrees (negative values west of Prime Meridian).
    """

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """


class EntityOnOrbit(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    sat_no: Required[Annotated[int, PropertyInfo(alias="satNo")]]
    """Satellite/Catalog number of the target on-orbit object."""

    source: Required[str]
    """Source of the data."""

    alt_name: Annotated[str, PropertyInfo(alias="altName")]
    """Alternate name of the on-orbit object."""

    category: Literal[
        "Unknown",
        "On-Orbit",
        "Decayed",
        "Cataloged Without State",
        "Launch Nominal",
        "Analyst Satellite",
        "Cislunar",
        "Lunar",
        "Hyperbolic",
        "Heliocentric",
        "Interplanetary",
        "Lagrangian",
        "Docked",
    ]
    """Category of the on-orbit object.

    (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst
    Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary,
    Lagrangian, Docked).
    """

    common_name: Annotated[str, PropertyInfo(alias="commonName")]
    """Common name of the on-orbit object."""

    constellation: str
    """Constellation to which this satellite belongs."""

    country_code: Annotated[str, PropertyInfo(alias="countryCode")]
    """The country code.

    This value is typically the ISO 3166 Alpha-2 two-character country code, however
    it can also represent various consortiums that do not appear in the ISO
    document. The code must correspond to an existing country in the UDL’s country
    API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code,
    or alternate code values that exist for the specified country code.
    """

    decay_date: Annotated[Union[str, datetime], PropertyInfo(alias="decayDate", format="iso8601")]
    """Date of decay."""

    id_on_orbit: Annotated[str, PropertyInfo(alias="idOnOrbit")]
    """
    For the public catalog, the idOnOrbit is typically the satellite number as a
    string, but may be a UUID for analyst or other unknown or untracked satellites,
    auto-generated by the system.
    """

    intl_des: Annotated[str, PropertyInfo(alias="intlDes")]
    """
    International Designator, typically of the format YYYYLLLAAA, where YYYY is the
    launch year, LLL is the sequential launch number of that year, and AAA is an
    optional launch piece designator for the launch.
    """

    launch_date: Annotated[Union[str, date], PropertyInfo(alias="launchDate", format="iso8601")]
    """Date of launch."""

    launch_site_id: Annotated[str, PropertyInfo(alias="launchSiteId")]
    """Id of the associated launchSite entity."""

    lifetime_years: Annotated[int, PropertyInfo(alias="lifetimeYears")]
    """Estimated lifetime of the on-orbit payload, if known."""

    mission_number: Annotated[str, PropertyInfo(alias="missionNumber")]
    """Mission number of the on-orbit object."""

    object_type: Annotated[
        Literal["ROCKET BODY", "DEBRIS", "PAYLOAD", "PLATFORM", "MANNED", "UNKNOWN"], PropertyInfo(alias="objectType")
    ]
    """
    Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED,
    UNKNOWN.
    """

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """


class Entity(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    name: Required[str]
    """Unique entity name."""

    source: Required[str]
    """Source of the data."""

    type: Required[
        Literal[
            "AIRCRAFT",
            "BUS",
            "COMM",
            "IR",
            "NAVIGATION",
            "ONORBIT",
            "RFEMITTER",
            "SCIENTIFIC",
            "SENSOR",
            "SITE",
            "VESSEL",
        ]
    ]
    """
    The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR,
    NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
    """

    country_code: Annotated[str, PropertyInfo(alias="countryCode")]
    """The country code.

    This value is typically the ISO 3166 Alpha-2 two-character country code, however
    it can also represent various consortiums that do not appear in the ISO
    document. The code must correspond to an existing country in the UDL’s country
    API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code,
    or alternate code values that exist for the specified country code.
    """

    id_entity: Annotated[str, PropertyInfo(alias="idEntity")]
    """Unique identifier of the record."""

    id_location: Annotated[str, PropertyInfo(alias="idLocation")]
    """Unique identifier of the entity location, if terrestrial/fixed."""

    id_on_orbit: Annotated[str, PropertyInfo(alias="idOnOrbit")]
    """Onorbit identifier if this entity is part of an on-orbit object.

    For the public catalog, the idOnOrbit is typically the satellite number as a
    string, but may be a UUID for analyst or other unknown or untracked satellites.
    """

    id_operating_unit: Annotated[str, PropertyInfo(alias="idOperatingUnit")]
    """Unique identifier of the associated operating unit object."""

    location: EntityLocation
    """
    Model representation of a location, which is a specific fixed point on the earth
    and is used to denote the locations of fixed sensors, operating units, etc.
    """

    on_orbit: Annotated[EntityOnOrbit, PropertyInfo(alias="onOrbit")]
    """Model object representing on-orbit objects or satellites in the system."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    owner_type: Annotated[
        Literal["Commercial", "Government", "Academic", "Consortium", "Other"], PropertyInfo(alias="ownerType")
    ]
    """Type of organization which owns this entity (e.g.

    Commercial, Government, Academic, Consortium, etc).
    """

    taskable: bool
    """Boolean indicating if this entity is taskable."""

    urls: List[str]
    """List of URLs to additional details/documents for this entity."""
