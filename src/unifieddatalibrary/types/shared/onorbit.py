# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import List, Optional
from datetime import date, datetime
from typing_extensions import Literal

from pydantic import Field as FieldInfo

from ..engine import Engine
from ..._compat import PYDANTIC_V2
from ..._models import BaseModel
from ..antenna_full import AntennaFull
from ..battery_full import BatteryFull

__all__ = [
    "Onorbit",
    "Antenna",
    "Battery",
    "OnorbitDetail",
    "SolarArray",
    "SolarArraySolarArray",
    "SolarArraySolarArraySolarArrayDetail",
    "SolarArraySolarArraySolarArrayDetailManufacturerOrg",
    "SolarArraySolarArraySolarArrayDetailManufacturerOrgOrganizationDetail",
    "Thruster",
]


class Antenna(BaseModel):
    classification_marking: str = FieldInfo(alias="classificationMarking")
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"] = FieldInfo(alias="dataMode")
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    id_antenna: str = FieldInfo(alias="idAntenna")
    """ID of the antenna."""

    id_on_orbit: str = FieldInfo(alias="idOnOrbit")
    """ID of the on-orbit object."""

    source: str
    """Source of the data."""

    id: Optional[str] = None
    """Unique identifier of the record, auto-generated by the system."""

    antenna: Optional[AntennaFull] = None
    """
    Model representation of information on on-orbit/spacecraft communication
    antennas. A spacecraft may have multiple antennas and each antenna can have
    multiple 'details' records compiled by different sources.
    """

    created_at: Optional[datetime] = FieldInfo(alias="createdAt", default=None)
    """Time the row was created in the database, auto-populated by the system."""

    created_by: Optional[str] = FieldInfo(alias="createdBy", default=None)
    """
    Application user who created the row in the database, auto-populated by the
    system.
    """

    origin: Optional[str] = None
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_network: Optional[str] = FieldInfo(alias="origNetwork", default=None)
    """
    The originating source network on which this record was created, auto-populated
    by the system.
    """

    updated_at: Optional[datetime] = FieldInfo(alias="updatedAt", default=None)
    """Time the row was last updated in the database, auto-populated by the system."""

    updated_by: Optional[str] = FieldInfo(alias="updatedBy", default=None)
    """
    Application user who updated the row in the database, auto-populated by the
    system.
    """


class Battery(BaseModel):
    classification_marking: str = FieldInfo(alias="classificationMarking")
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"] = FieldInfo(alias="dataMode")
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    id_battery: str = FieldInfo(alias="idBattery")
    """ID of the battery."""

    id_on_orbit: str = FieldInfo(alias="idOnOrbit")
    """ID of the on-orbit object."""

    source: str
    """Source of the data."""

    id: Optional[str] = None
    """Unique identifier of the record, auto-generated by the system."""

    battery: Optional[BatteryFull] = None
    """Model representation of specific spacecraft battery types."""

    created_at: Optional[datetime] = FieldInfo(alias="createdAt", default=None)
    """Time the row was created in the database, auto-populated by the system."""

    created_by: Optional[str] = FieldInfo(alias="createdBy", default=None)
    """
    Application user who created the row in the database, auto-populated by the
    system.
    """

    origin: Optional[str] = None
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_network: Optional[str] = FieldInfo(alias="origNetwork", default=None)
    """
    The originating source network on which this record was created, auto-populated
    by the system.
    """

    quantity: Optional[int] = None
    """The number of batteries on the spacecraft of the type identified by idBattery."""

    updated_at: Optional[datetime] = FieldInfo(alias="updatedAt", default=None)
    """Time the row was last updated in the database, auto-populated by the system."""

    updated_by: Optional[str] = FieldInfo(alias="updatedBy", default=None)
    """
    Application user who updated the row in the database, auto-populated by the
    system.
    """


class OnorbitDetail(BaseModel):
    classification_marking: str = FieldInfo(alias="classificationMarking")
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"] = FieldInfo(alias="dataMode")
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    id_on_orbit: str = FieldInfo(alias="idOnOrbit")
    """UUID of the parent Onorbit record."""

    source: str
    """Source of the data."""

    id: Optional[str] = None
    """Unique identifier of the record, auto-generated by the system."""

    additional_mass: Optional[float] = FieldInfo(alias="additionalMass", default=None)
    """Mass of fuel and disposables at launch time in kilograms."""

    adept_radius: Optional[float] = FieldInfo(alias="adeptRadius", default=None)
    """
    The radius used for long-term debris environment projection analyses that is not
    as conservative as COLA Radius, in meters.
    """

    bol_delta_v: Optional[float] = FieldInfo(alias="bolDeltaV", default=None)
    """The total beginning of life delta V of the spacecraft, in meters per second."""

    bol_fuel_mass: Optional[float] = FieldInfo(alias="bolFuelMass", default=None)
    """Spacecraft beginning of life fuel mass, in orbit, in kilograms."""

    bus_cross_section: Optional[float] = FieldInfo(alias="busCrossSection", default=None)
    """Average cross sectional area of the bus in meters squared."""

    bus_type: Optional[str] = FieldInfo(alias="busType", default=None)
    """Type of the bus on the spacecraft."""

    cola_radius: Optional[float] = FieldInfo(alias="colaRadius", default=None)
    """
    Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b +
    c\\**c) where a is the tip-to-tip dimension, b and c are perpendicular to that.)
    in meters.
    """

    created_at: Optional[datetime] = FieldInfo(alias="createdAt", default=None)
    """Time the row was created in the database, auto-populated by the system."""

    created_by: Optional[str] = FieldInfo(alias="createdBy", default=None)
    """
    Application user who created the row in the database, auto-populated by the
    system.
    """

    cross_section: Optional[float] = FieldInfo(alias="crossSection", default=None)
    """Average cross sectional area in meters squared."""

    current_mass: Optional[float] = FieldInfo(alias="currentMass", default=None)
    """The estimated total current mass of the spacecraft, in kilograms."""

    delta_v_unc: Optional[float] = FieldInfo(alias="deltaVUnc", default=None)
    """The 1-sigma uncertainty of the total spacecraft delta V, in meters per second."""

    dep_est_masses: Optional[List[float]] = FieldInfo(alias="depEstMasses", default=None)
    """Array of the estimated mass of each deployable object, in kilograms.

    Must contain the same number of elements as the value of numDeployable.
    """

    dep_mass_uncs: Optional[List[float]] = FieldInfo(alias="depMassUncs", default=None)
    """
    Array of the 1-sigma uncertainty of the mass for each deployable object, in
    kilograms. Must contain the same number of elements as the value of
    numDeployable.
    """

    dep_names: Optional[List[str]] = FieldInfo(alias="depNames", default=None)
    """Array of satellite deployable objects.

    Must contain the same number of elements as the value of numDeployable.
    """

    drift_rate: Optional[float] = FieldInfo(alias="driftRate", default=None)
    """GEO drift rate, if applicable in degrees per day."""

    dry_mass: Optional[float] = FieldInfo(alias="dryMass", default=None)
    """Spacecraft dry mass (without fuel or disposables) in kilograms."""

    est_delta_v_duration: Optional[float] = FieldInfo(alias="estDeltaVDuration", default=None)
    """Estimated maximum burn duration for the object, in seconds."""

    fuel_remaining: Optional[float] = FieldInfo(alias="fuelRemaining", default=None)
    """Estimated remaining fuel for the object in kilograms."""

    geo_slot: Optional[float] = FieldInfo(alias="geoSlot", default=None)
    """GEO slot if applicable, in degrees.

    -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime
    Meridian is 0.
    """

    last_ob_source: Optional[str] = FieldInfo(alias="lastObSource", default=None)
    """The name of the source who last provided an observation for this idOnOrbit."""

    last_ob_time: Optional[datetime] = FieldInfo(alias="lastObTime", default=None)
    """
    Time of last reported observation for this object in ISO 8601 UTC with
    microsecond precision.
    """

    launch_mass: Optional[float] = FieldInfo(alias="launchMass", default=None)
    """Nominal mass of spacecraft and fuel at launch time, in kilograms."""

    launch_mass_max: Optional[float] = FieldInfo(alias="launchMassMax", default=None)
    """Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms."""

    launch_mass_min: Optional[float] = FieldInfo(alias="launchMassMin", default=None)
    """Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms."""

    maneuverable: Optional[bool] = None
    """Boolean indicating whether a spacecraft is maneuverable.

    Note that a spacecraft may have propulsion capability but may not be
    maneuverable due to lack of fuel, anomalous condition, or other operational
    constraints.
    """

    max_delta_v: Optional[float] = FieldInfo(alias="maxDeltaV", default=None)
    """Maximum delta V available for this on-orbit spacecraft, in meters per second."""

    max_radius: Optional[float] = FieldInfo(alias="maxRadius", default=None)
    """
    Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel
    arrays) in meters.
    """

    mission_types: Optional[List[str]] = FieldInfo(alias="missionTypes", default=None)
    """Array of the type of missions the spacecraft performs.

    Must contain the same number of elements as the value of numMission.
    """

    num_deployable: Optional[int] = FieldInfo(alias="numDeployable", default=None)
    """The number of sub-satellites or deployable objects on the spacecraft."""

    num_mission: Optional[int] = FieldInfo(alias="numMission", default=None)
    """The number of distinct missions the spacecraft performs."""

    origin: Optional[str] = None
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_network: Optional[str] = FieldInfo(alias="origNetwork", default=None)
    """
    The originating source network on which this record was created, auto-populated
    by the system.
    """

    rcs: Optional[float] = None
    """Current/latest radar cross section in meters squared."""

    rcs_max: Optional[float] = FieldInfo(alias="rcsMax", default=None)
    """Maximum radar cross section in meters squared."""

    rcs_mean: Optional[float] = FieldInfo(alias="rcsMean", default=None)
    """Mean radar cross section in meters squared."""

    rcs_min: Optional[float] = FieldInfo(alias="rcsMin", default=None)
    """Minimum radar cross section in meters squared."""

    ref_source: Optional[str] = FieldInfo(alias="refSource", default=None)
    """
    The reference source, sources, or URL from which the data in this record was
    obtained.
    """

    solar_array_area: Optional[float] = FieldInfo(alias="solarArrayArea", default=None)
    """Spacecraft deployed area of solar array in meters squared."""

    total_mass_unc: Optional[float] = FieldInfo(alias="totalMassUnc", default=None)
    """The 1-sigma uncertainty of the total spacecraft mass, in kilograms."""

    updated_at: Optional[datetime] = FieldInfo(alias="updatedAt", default=None)
    """Time the row was last updated in the database, auto-populated by the system."""

    updated_by: Optional[str] = FieldInfo(alias="updatedBy", default=None)
    """
    Application user who updated the row in the database, auto-populated by the
    system.
    """

    vismag: Optional[float] = None
    """Current/latest visual magnitude in M."""

    vismag_max: Optional[float] = FieldInfo(alias="vismagMax", default=None)
    """Maximum visual magnitude in M."""

    vismag_mean: Optional[float] = FieldInfo(alias="vismagMean", default=None)
    """Mean visual magnitude in M."""

    vismag_min: Optional[float] = FieldInfo(alias="vismagMin", default=None)
    """Minimum visual magnitude in M."""


class SolarArraySolarArraySolarArrayDetailManufacturerOrgOrganizationDetail(BaseModel):
    classification_marking: str = FieldInfo(alias="classificationMarking")
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"] = FieldInfo(alias="dataMode")
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    id_organization: str = FieldInfo(alias="idOrganization")
    """Unique identifier of the parent organization."""

    name: str
    """Organization details name."""

    source: str
    """Source of the data."""

    id: Optional[str] = None
    """Unique identifier of the record, auto-generated by the system."""

    address1: Optional[str] = None
    """Street number of the organization."""

    address2: Optional[str] = None
    """
    Field for additional organization address information such as PO Box and unit
    number.
    """

    address3: Optional[str] = None
    """Contains the third line of address information for an organization."""

    broker: Optional[str] = None
    """Designated broker for this organization."""

    ceo: Optional[str] = None
    """For organizations of type CORPORATION, the name of the Chief Executive Officer."""

    cfo: Optional[str] = None
    """For organizations of type CORPORATION, the name of the Chief Financial Officer."""

    created_at: Optional[datetime] = FieldInfo(alias="createdAt", default=None)
    """Time the row was created in the database, auto-populated by the system."""

    created_by: Optional[str] = FieldInfo(alias="createdBy", default=None)
    """
    Application user who created the row in the database, auto-populated by the
    system.
    """

    cto: Optional[str] = None
    """
    For organizations of type CORPORATION, the name of the Chief Technology Officer.
    """

    description: Optional[str] = None
    """Organization description."""

    ebitda: Optional[float] = None
    """
    For organizations of type CORPORATION, the company EBITDA value as of
    financialYearEndDate in US Dollars.
    """

    email: Optional[str] = None
    """Listed contact email address for the organization."""

    financial_notes: Optional[str] = FieldInfo(alias="financialNotes", default=None)
    """For organizations of type CORPORATION, notes on company financials."""

    financial_year_end_date: Optional[datetime] = FieldInfo(alias="financialYearEndDate", default=None)
    """
    For organizations of type CORPORATION, the effective financial year end date for
    revenue, EBITDA, and profit values.
    """

    fleet_plan_notes: Optional[str] = FieldInfo(alias="fleetPlanNotes", default=None)
    """Satellite fleet planning notes for this organization."""

    former_org_id: Optional[str] = FieldInfo(alias="formerOrgId", default=None)
    """
    Former organization ID (if this organization previously existed as another
    organization).
    """

    ftes: Optional[int] = None
    """Total number of FTEs in this organization."""

    geo_admin_level1: Optional[str] = FieldInfo(alias="geoAdminLevel1", default=None)
    """Administrative boundaries of the first sub-national level.

    Level 1 is simply the largest demarcation under whatever demarcation criteria
    has been determined by the governing body. For example, this may be a state or
    province.
    """

    geo_admin_level2: Optional[str] = FieldInfo(alias="geoAdminLevel2", default=None)
    """Administrative boundaries of the second sub-national level.

    Level 2 is simply the second largest demarcation under whatever demarcation
    criteria has been determined by the governing body. For example, this may be a
    county or district.
    """

    geo_admin_level3: Optional[str] = FieldInfo(alias="geoAdminLevel3", default=None)
    """Administrative boundaries of the third sub-national level.

    Level 3 is simply the third largest demarcation under whatever demarcation
    criteria has been determined by the governing body. For example, this may be a
    city or township.
    """

    mass_ranking: Optional[int] = FieldInfo(alias="massRanking", default=None)
    """Mass ranking for this organization."""

    origin: Optional[str] = None
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_network: Optional[str] = FieldInfo(alias="origNetwork", default=None)
    """
    The originating source network on which this record was created, auto-populated
    by the system.
    """

    parent_org_id: Optional[str] = FieldInfo(alias="parentOrgId", default=None)
    """Parent organization ID of this organization if it is a child organization."""

    postal_code: Optional[str] = FieldInfo(alias="postalCode", default=None)
    """
    A postal code, such as PIN or ZIP Code, is a series of letters or digits or both
    included in the postal address of the organization.
    """

    profit: Optional[float] = None
    """
    For organizations of type CORPORATION, total annual profit as of
    financialYearEndDate in US Dollars.
    """

    revenue: Optional[float] = None
    """
    For organizations of type CORPORATION, total annual revenue as of
    financialYearEndDate in US Dollars.
    """

    revenue_ranking: Optional[int] = FieldInfo(alias="revenueRanking", default=None)
    """Revenue ranking for this organization."""

    risk_manager: Optional[str] = FieldInfo(alias="riskManager", default=None)
    """The name of the risk manager for the organization."""

    services_notes: Optional[str] = FieldInfo(alias="servicesNotes", default=None)
    """Notes on the services provided by the organization."""

    tags: Optional[List[str]] = None
    """
    Optional array of provider/source specific tags for this data, where each
    element is no longer than 32 characters, used for implementing data owner
    conditional access controls to restrict access to the data. Should be left null
    by data providers unless conditional access controls are coordinated with the
    UDL team.
    """

    updated_at: Optional[datetime] = FieldInfo(alias="updatedAt", default=None)
    """Time the row was last updated in the database, auto-populated by the system."""

    updated_by: Optional[str] = FieldInfo(alias="updatedBy", default=None)
    """
    Application user who updated the row in the database, auto-populated by the
    system.
    """


class SolarArraySolarArraySolarArrayDetailManufacturerOrg(BaseModel):
    classification_marking: str = FieldInfo(alias="classificationMarking")
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"] = FieldInfo(alias="dataMode")
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    name: str
    """Organization name."""

    source: str
    """Source of the data."""

    type: str
    """Type of organization (e.g. GOVERNMENT, CORPORATION, CONSORTIUM, ACADEMIC)."""

    id: Optional[str] = None
    """Unique identifier of the record, auto-generated by the system."""

    active: Optional[bool] = None
    """Boolean indicating if this organization is currently active."""

    category: Optional[str] = None
    """Subtype or category of the organization (e.g.

    Private company, stock market quoted company, subsidiary, goverment
    department/agency, etc).
    """

    country_code: Optional[str] = FieldInfo(alias="countryCode", default=None)
    """Country of the physical location of the organization.

    This value is typically the ISO 3166 Alpha-2 two-character country code.
    However, it can also represent various consortiums that do not appear in the ISO
    document. The code must correspond to an existing country in the UDL’s country
    API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code,
    or alternate code values that exist for the specified country code.
    """

    created_at: Optional[datetime] = FieldInfo(alias="createdAt", default=None)
    """Time the row was created in the database, auto-populated by the system."""

    created_by: Optional[str] = FieldInfo(alias="createdBy", default=None)
    """
    Application user who created the row in the database, auto-populated by the
    system.
    """

    description: Optional[str] = None
    """Organization description."""

    external_id: Optional[str] = FieldInfo(alias="externalId", default=None)
    """Optional externally provided identifier for this row."""

    nationality: Optional[str] = None
    """Country of registration or ownership of the organization.

    This value is typically the ISO 3166 Alpha-2 two-character country code, however
    it can also represent various consortiums that do not appear in the ISO
    document. The code must correspond to an existing country in the UDL’s country
    API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code,
    or alternate code values that exist for the specified country code.
    """

    organization_details: Optional[List[SolarArraySolarArraySolarArrayDetailManufacturerOrgOrganizationDetail]] = (
        FieldInfo(alias="organizationDetails", default=None)
    )
    """
    Read-only collection of additional OrganizationDetails by various sources for
    this organization, ignored on create/update. These details must be created
    separately via the /udl/organizationdetails operations.
    """

    origin: Optional[str] = None
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_network: Optional[str] = FieldInfo(alias="origNetwork", default=None)
    """
    The originating source network on which this record was created, auto-populated
    by the system.
    """

    updated_at: Optional[datetime] = FieldInfo(alias="updatedAt", default=None)
    """Time the row was last updated in the database, auto-populated by the system."""

    updated_by: Optional[str] = FieldInfo(alias="updatedBy", default=None)
    """
    Application user who updated the row in the database, auto-populated by the
    system.
    """


class SolarArraySolarArraySolarArrayDetail(BaseModel):
    classification_marking: str = FieldInfo(alias="classificationMarking")
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"] = FieldInfo(alias="dataMode")
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    id_solar_array: str = FieldInfo(alias="idSolarArray")
    """Unique identifier of the parent SolarArray."""

    source: str
    """Source of the data."""

    id: Optional[str] = None
    """Unique identifier of the record, auto-generated by the system."""

    area: Optional[float] = None
    """Solar Array area in square meters."""

    created_at: Optional[datetime] = FieldInfo(alias="createdAt", default=None)
    """Time the row was created in the database, auto-populated by the system."""

    created_by: Optional[str] = FieldInfo(alias="createdBy", default=None)
    """
    Application user who created the row in the database, auto-populated by the
    system.
    """

    description: Optional[str] = None
    """Solar array description/notes."""

    junction_technology: Optional[str] = FieldInfo(alias="junctionTechnology", default=None)
    """Solar array junction technology (e.g. Triple)."""

    manufacturer_org: Optional[SolarArraySolarArraySolarArrayDetailManufacturerOrg] = FieldInfo(
        alias="manufacturerOrg", default=None
    )
    """An organization such as a corporation, manufacturer, consortium, government,
    etc.

    An organization may have parent and child organizations as well as link to a
    former organization if this org previously existed as another organization.
    """

    manufacturer_org_id: Optional[str] = FieldInfo(alias="manufacturerOrgId", default=None)
    """Unique identifier of the organization that manufactures the solar array."""

    origin: Optional[str] = None
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_network: Optional[str] = FieldInfo(alias="origNetwork", default=None)
    """
    The originating source network on which this record was created, auto-populated
    by the system.
    """

    span: Optional[float] = None
    """Solar Array span in meters."""

    tags: Optional[List[str]] = None
    """
    Optional array of provider/source specific tags for this data, where each
    element is no longer than 32 characters, used for implementing data owner
    conditional access controls to restrict access to the data. Should be left null
    by data providers unless conditional access controls are coordinated with the
    UDL team.
    """

    technology: Optional[str] = None
    """Solar array technology (e.g. Ga-As)."""

    type: Optional[str] = None
    """Type of solar array (e.g. U Shaped)."""

    updated_at: Optional[datetime] = FieldInfo(alias="updatedAt", default=None)
    """Time the row was last updated in the database, auto-populated by the system."""

    updated_by: Optional[str] = FieldInfo(alias="updatedBy", default=None)
    """
    Application user who updated the row in the database, auto-populated by the
    system.
    """


class SolarArraySolarArray(BaseModel):
    data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"] = FieldInfo(alias="dataMode")
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    name: str
    """Solar Array name."""

    source: str
    """Source of the data."""

    id: Optional[str] = None
    """Unique identifier of the record, auto-generated by the system."""

    created_at: Optional[datetime] = FieldInfo(alias="createdAt", default=None)
    """Time the row was created in the database, auto-populated by the system."""

    created_by: Optional[str] = FieldInfo(alias="createdBy", default=None)
    """
    Application user who created the row in the database, auto-populated by the
    system.
    """

    origin: Optional[str] = None
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_network: Optional[str] = FieldInfo(alias="origNetwork", default=None)
    """
    The originating source network on which this record was created, auto-populated
    by the system.
    """

    solar_array_details: Optional[List[SolarArraySolarArraySolarArrayDetail]] = FieldInfo(
        alias="solarArrayDetails", default=None
    )
    """
    Read-only collection of additional SolarArrayDetails by various sources for this
    organization, ignored on create/update. These details must be created separately
    via the /udl/solararraydetails operations.
    """

    updated_at: Optional[datetime] = FieldInfo(alias="updatedAt", default=None)
    """Time the row was last updated in the database, auto-populated by the system."""

    updated_by: Optional[str] = FieldInfo(alias="updatedBy", default=None)
    """
    Application user who updated the row in the database, auto-populated by the
    system.
    """


class SolarArray(BaseModel):
    classification_marking: str = FieldInfo(alias="classificationMarking")
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"] = FieldInfo(alias="dataMode")
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    id_on_orbit: str = FieldInfo(alias="idOnOrbit")
    """ID of the on-orbit object."""

    id_solar_array: str = FieldInfo(alias="idSolarArray")
    """ID of the SolarArray."""

    source: str
    """Source of the data."""

    id: Optional[str] = None
    """Unique identifier of the record, auto-generated by the system."""

    created_at: Optional[datetime] = FieldInfo(alias="createdAt", default=None)
    """Time the row was created in the database, auto-populated by the system."""

    created_by: Optional[str] = FieldInfo(alias="createdBy", default=None)
    """
    Application user who created the row in the database, auto-populated by the
    system.
    """

    origin: Optional[str] = None
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_network: Optional[str] = FieldInfo(alias="origNetwork", default=None)
    """
    The originating source network on which this record was created, auto-populated
    by the system.
    """

    quantity: Optional[int] = None
    """
    The number of solar arrays on the spacecraft of the type identified by
    idSolarArray.
    """

    solar_array: Optional[SolarArraySolarArray] = FieldInfo(alias="solarArray", default=None)
    """Model representation of information on on-orbit/spacecraft solar arrays.

    A spacecraft may have multiple solar arrays and each solar array can have
    multiple 'details' records compiled by different sources.
    """

    updated_at: Optional[datetime] = FieldInfo(alias="updatedAt", default=None)
    """Time the row was last updated in the database, auto-populated by the system."""

    updated_by: Optional[str] = FieldInfo(alias="updatedBy", default=None)
    """
    Application user who updated the row in the database, auto-populated by the
    system.
    """


class Thruster(BaseModel):
    classification_marking: str = FieldInfo(alias="classificationMarking")
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"] = FieldInfo(alias="dataMode")
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    id_engine: str = FieldInfo(alias="idEngine")
    """ID of the Engine."""

    id_on_orbit: str = FieldInfo(alias="idOnOrbit")
    """ID of the on-orbit object."""

    source: str
    """Source of the data."""

    id: Optional[str] = None
    """Unique identifier of the record, auto-generated by the system."""

    created_at: Optional[datetime] = FieldInfo(alias="createdAt", default=None)
    """Time the row was created in the database, auto-populated by the system."""

    created_by: Optional[str] = FieldInfo(alias="createdBy", default=None)
    """
    Application user who created the row in the database, auto-populated by the
    system.
    """

    engine: Optional[Engine] = None
    """Known launch vehicle engines and their performance characteristics and limits.

    A launch vehicle has 1 to many engines per stage.
    """

    origin: Optional[str] = None
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_network: Optional[str] = FieldInfo(alias="origNetwork", default=None)
    """
    The originating source network on which this record was created, auto-populated
    by the system.
    """

    quantity: Optional[int] = None
    """
    The number of engines/thrusters on the spacecraft of the type identified by
    idEngine.
    """

    type: Optional[str] = None
    """The type of thruster associated with this record (e.g.

    LAE, Hydrazine REA, etc.).
    """

    updated_at: Optional[datetime] = FieldInfo(alias="updatedAt", default=None)
    """Time the row was last updated in the database, auto-populated by the system."""

    updated_by: Optional[str] = FieldInfo(alias="updatedBy", default=None)
    """
    Application user who updated the row in the database, auto-populated by the
    system.
    """


class Onorbit(BaseModel):
    classification_marking: str = FieldInfo(alias="classificationMarking")
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Literal["REAL", "TEST", "SIMULATED", "EXERCISE"] = FieldInfo(alias="dataMode")
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    sat_no: int = FieldInfo(alias="satNo")
    """Satellite/Catalog number of the target on-orbit object."""

    source: str
    """Source of the data."""

    alt_name: Optional[str] = FieldInfo(alias="altName", default=None)
    """Alternate name of the on-orbit object."""

    antennas: Optional[List[Antenna]] = None
    """Read-only collection of antennas on this on-orbit object."""

    batteries: Optional[List[Battery]] = None
    """Read-only collection of batteries on this on-orbit object."""

    category: Optional[
        Literal[
            "Unknown",
            "On-Orbit",
            "Decayed",
            "Cataloged Without State",
            "Launch Nominal",
            "Analyst Satellite",
            "Cislunar",
            "Lunar",
            "Hyperbolic",
            "Heliocentric",
            "Interplanetary",
            "Lagrangian",
            "Docked",
        ]
    ] = None
    """Category of the on-orbit object.

    (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst
    Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary,
    Lagrangian, Docked).
    """

    common_name: Optional[str] = FieldInfo(alias="commonName", default=None)
    """Common name of the on-orbit object."""

    constellation: Optional[str] = None
    """Constellation to which this satellite belongs."""

    country_code: Optional[str] = FieldInfo(alias="countryCode", default=None)
    """The country code.

    This value is typically the ISO 3166 Alpha-2 two-character country code, however
    it can also represent various consortiums that do not appear in the ISO
    document. The code must correspond to an existing country in the UDL’s country
    API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code,
    or alternate code values that exist for the specified country code.
    """

    created_at: Optional[datetime] = FieldInfo(alias="createdAt", default=None)
    """Time the row was created in the database, auto-populated by the system."""

    created_by: Optional[str] = FieldInfo(alias="createdBy", default=None)
    """
    Application user who created the row in the database, auto-populated by the
    system.
    """

    decay_date: Optional[datetime] = FieldInfo(alias="decayDate", default=None)
    """Date of decay."""

    entity_collection: Optional[List["EntityFull"]] = FieldInfo(alias="entityCollection", default=None)

    id_on_orbit: Optional[str] = FieldInfo(alias="idOnOrbit", default=None)
    """
    For the public catalog, the idOnOrbit is typically the satellite number as a
    string, but may be a UUID for analyst or other unknown or untracked satellites,
    auto-generated by the system.
    """

    intl_des: Optional[str] = FieldInfo(alias="intlDes", default=None)
    """
    International Designator, typically of the format YYYYLLLAAA, where YYYY is the
    launch year, LLL is the sequential launch number of that year, and AAA is an
    optional launch piece designator for the launch.
    """

    launch_date: Optional[date] = FieldInfo(alias="launchDate", default=None)
    """Date of launch."""

    launch_site_id: Optional[str] = FieldInfo(alias="launchSiteId", default=None)
    """Id of the associated launchSite entity."""

    lifetime_years: Optional[int] = FieldInfo(alias="lifetimeYears", default=None)
    """Estimated lifetime of the on-orbit payload, if known."""

    mission_number: Optional[str] = FieldInfo(alias="missionNumber", default=None)
    """Mission number of the on-orbit object."""

    object_type: Optional[Literal["ROCKET BODY", "DEBRIS", "PAYLOAD", "PLATFORM", "MANNED", "UNKNOWN"]] = FieldInfo(
        alias="objectType", default=None
    )
    """
    Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED,
    UNKNOWN.
    """

    onorbit_details: Optional[List[OnorbitDetail]] = FieldInfo(alias="onorbitDetails", default=None)
    """Read-only collection of details for this on-orbit object."""

    origin: Optional[str] = None
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    orig_network: Optional[str] = FieldInfo(alias="origNetwork", default=None)
    """
    The originating source network on which this record was created, auto-populated
    by the system.
    """

    solar_arrays: Optional[List[SolarArray]] = FieldInfo(alias="solarArrays", default=None)
    """Read-only collection of solar arrays on this on-orbit object."""

    thrusters: Optional[List[Thruster]] = None
    """Read-only collection of thrusters (engines) on this on-orbit object."""

    updated_at: Optional[datetime] = FieldInfo(alias="updatedAt", default=None)
    """Time the row was last updated in the database, auto-populated by the system."""

    updated_by: Optional[str] = FieldInfo(alias="updatedBy", default=None)
    """
    Application user who updated the row in the database, auto-populated by the
    system.
    """


from ..entity_full import EntityFull

if PYDANTIC_V2:
    Onorbit.model_rebuild()
    Antenna.model_rebuild()
    Battery.model_rebuild()
    OnorbitDetail.model_rebuild()
    SolarArray.model_rebuild()
    SolarArraySolarArray.model_rebuild()
    SolarArraySolarArraySolarArrayDetail.model_rebuild()
    SolarArraySolarArraySolarArrayDetailManufacturerOrg.model_rebuild()
    SolarArraySolarArraySolarArrayDetailManufacturerOrgOrganizationDetail.model_rebuild()
    Thruster.model_rebuild()
else:
    Onorbit.update_forward_refs()  # type: ignore
    Antenna.update_forward_refs()  # type: ignore
    Battery.update_forward_refs()  # type: ignore
    OnorbitDetail.update_forward_refs()  # type: ignore
    SolarArray.update_forward_refs()  # type: ignore
    SolarArraySolarArray.update_forward_refs()  # type: ignore
    SolarArraySolarArraySolarArrayDetail.update_forward_refs()  # type: ignore
    SolarArraySolarArraySolarArrayDetailManufacturerOrg.update_forward_refs()  # type: ignore
    SolarArraySolarArraySolarArrayDetailManufacturerOrgOrganizationDetail.update_forward_refs()  # type: ignore
    Thruster.update_forward_refs()  # type: ignore
