# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from __future__ import annotations

from typing import List
from typing_extensions import Literal, Required, Annotated, TypedDict

from .._utils import PropertyInfo
from .onorbit_ingest_param import OnorbitIngestParam
from .location_ingest_param import LocationIngestParam

__all__ = ["EntityCreateParams"]


class EntityCreateParams(TypedDict, total=False):
    classification_marking: Required[Annotated[str, PropertyInfo(alias="classificationMarking")]]
    """Classification marking of the data in IC/CAPCO Portion-marked format."""

    data_mode: Required[Annotated[Literal["REAL", "TEST", "SIMULATED", "EXERCISE"], PropertyInfo(alias="dataMode")]]
    """Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:

    EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data
    may include both real and simulated data.

    REAL:&nbsp;Data collected or produced that pertains to real-world objects,
    events, and analysis.

    SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world
    datasets.

    TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and
    requirements, and for validating technical, functional, and performance
    characteristics.
    """

    name: Required[str]
    """Unique entity name."""

    source: Required[str]
    """Source of the data."""

    type: Required[
        Literal[
            "AIRCRAFT",
            "BUS",
            "COMM",
            "IR",
            "NAVIGATION",
            "ONORBIT",
            "RFEMITTER",
            "SCIENTIFIC",
            "SENSOR",
            "SITE",
            "VESSEL",
        ]
    ]
    """
    The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR,
    NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).
    """

    country_code: Annotated[str, PropertyInfo(alias="countryCode")]
    """The country code.

    This value is typically the ISO 3166 Alpha-2 two-character country code, however
    it can also represent various consortiums that do not appear in the ISO
    document. The code must correspond to an existing country in the UDLâ€™s country
    API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code,
    or alternate code values that exist for the specified country code.
    """

    id_entity: Annotated[str, PropertyInfo(alias="idEntity")]
    """Unique identifier of the record."""

    id_location: Annotated[str, PropertyInfo(alias="idLocation")]
    """Unique identifier of the entity location, if terrestrial/fixed."""

    id_on_orbit: Annotated[str, PropertyInfo(alias="idOnOrbit")]
    """Onorbit identifier if this entity is part of an on-orbit object.

    For the public catalog, the idOnOrbit is typically the satellite number as a
    string, but may be a UUID for analyst or other unknown or untracked satellites.
    """

    id_operating_unit: Annotated[str, PropertyInfo(alias="idOperatingUnit")]
    """Unique identifier of the associated operating unit object."""

    location: LocationIngestParam
    """
    Model representation of a location, which is a specific fixed point on the earth
    and is used to denote the locations of fixed sensors, operating units, etc.
    """

    on_orbit: Annotated[OnorbitIngestParam, PropertyInfo(alias="onOrbit")]
    """Model object representing on-orbit objects or satellites in the system."""

    origin: str
    """
    Originating system or organization which produced the data, if different from
    the source. The origin may be different than the source if the source was a
    mediating system which forwarded the data on behalf of the origin system. If
    null, the source may be assumed to be the origin.
    """

    owner_type: Annotated[
        Literal["Commercial", "Government", "Academic", "Consortium", "Other"], PropertyInfo(alias="ownerType")
    ]
    """Type of organization which owns this entity (e.g.

    Commercial, Government, Academic, Consortium, etc).
    """

    taskable: bool
    """Boolean indicating if this entity is taskable."""

    urls: List[str]
    """List of URLs to additional details/documents for this entity."""
